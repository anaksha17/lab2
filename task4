class Environment:
    def __init__(self):
        # Create a 3x3 grid, where some positions are dirty
        self.grid = [
            'Safe', 'High Risk Vulnerable', 'Low Risk Vulnerable',
            'Safe', 'Low Risk Vulnerable', 'Safe','High Risk Vulnerable','Low Risk Vulnerable','High Risk Vulnerable'
        ]

    def get_percept(self, position):
        # Return the state of the current position
        return self.grid[position]

    def Scan(self, position):
        # Complete the task at the given position
        self.grid[position] = 'Patched'
       
     
    def display_grid(self, agent_position):
        # Display the current state of the grid in a 3x3 format
        print("\nCurrent Grid State:")
        grid_with_agent = self.grid[:]  # Copy the grid
        grid_with_agent[agent_position] = " ðŸ‘½"  # Place the agent
        for i in range(0, 9, 3):
            print(" | ".join(grid_with_agent[i:i + 3]))
        print()  # Extra line for spacing

cost=100
class UtilityBasedAgent:
    def __init__(self):
        self.position = 0  # Start at position 0
    def utility_function(self,percept):
        if percept == 'Safe':
            
            return cost+0
        elif percept == 'Low Risk Vulnerable':
            return cost+100
        else:
            return cost-50 


    def act(self, percept):
        utility=UtilityBasedAgent.utility_function(self,percept)
        if utility==cost:
            return "NO ACTION..The component is Safe"
        elif utility>cost:
            return "Going For Patching.."
        else:
            return "Require Premium Service.."
        

         
        
    
                 

    def move(self):
        # Move to the next position in the grid
        if self.position < 8:
            self.position += 1
def step_to_letter(step):
    return chr(97 + step)    

def run_agent(agent, environment, steps):
    for step in range(steps):
        letter= step_to_letter(step)
         
        percept = environment.get_percept(agent.position)
        
        action = agent.act(percept)

        print(f"Step {letter}: Position {agent.position} -> Percept: {percept}, Action: {action}")
        environment.display_grid(agent.position)  # Display the grid state

        if percept == 'Low Risk Vulnerable':
            environment.Scan(agent.position)
      


        agent.move()


# Create instances of agent and environment
agent = UtilityBasedAgent()
environment = Environment()

# Run the agent in the environment for 9 steps (to cover the 3x3 grid)
run_agent(agent, environment, 9)
